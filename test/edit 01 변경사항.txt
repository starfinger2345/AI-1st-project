기존 특징 추출 방식 : 관절 각도만을 사용. 각 손가락 포인트의 벡터 내적합 
			     -> 랜드마크 좌표 직접 사용 , 손가락 끝과 관절 사이의 거리 (4,8,12,16,20), 손의 방향 벡터 추가하기
모델 교체: KNN → 랜덤 포레스트 (Random Forest)

추가한 부분 :
1.정규화된 랜드마크 좌표 직접 사용: 
calculate_angles 함수를 거치지 않고, 손목(landmark 0)을 기준으로 정규화된 랜드마크 좌표 자체를 특징으로 사용할 수 있습니다. 각도 계산 과정에서 일부 정보가 손실될 수 있기 때문입니다.

	장점 : 정규화된 랜드마크 좌표를 직접 특징으로 사용하는 방식은 다음과 같은 명확한 장점들을 가집니다.

	정보 손실 최소화 가장 큰 장점은 손의 3D 공간 정보를 거의 그대로 보존한다는 점입니다.

	각도 계산의 한계: 관절 각도를 계산하는 것은 랜드마크들의 '상대적인 굽힘 정도'라는 특정 정보만 추출하는 과정입니다. 이 과정에서 각 마디의 길이 비율, 손가락 사이의 거리, 손바닥의 미세한 형태 등 유용한 3D 공간 정보들이 손실됩니다.

	좌표 직접 사용: 손목을 기준으로 정규화된 좌표를 사용하면, 각 랜드마크의 상대적인 3D 위치 정보 전체를 특징으로 활용할 수 있습니다. 이는 모델이 더 풍부하고 미묘한 패턴을 학습할 기회를 제공하여, 비슷해 보이는 손 모양(예: 'ㅏ'와 'ㅑ')을 더 정교하게 구분할 수 있게 도와줍니다.

2.손가락 끝과 관절 사이의 거리:  (선행 논문에서는 4,8,12,14,16,18,20)
특정 손가락 끝(예: 엄지 끝)과 다른 손가락 마디 사이의 거리를 계산하여 특징으로 추가할 수 있습니다.

	장점 :  회전에 대한 강인함 증가 , 더욱 풍부하고 정교한 특징 추출
	단점 :  1. 너무 많은 거리 특징(예: 모든 랜드마크 쌍 사이의 거리)을 무분별하게 추가하면 특징 벡터의 차원이 지나치게 커집니다. 	이 경우, 데이터의 밀도가 낮아져 오히려 모델의 성능이 떨어질 수 있습니다. >> 모든 거리를 사용하는 대신, 의미 있다고 판단되는 핵심적인 거리들만 선택적으로 추가하는 것이 좋습니다. (예: 엄지 끝과 나머지 손가락 끝 4개 사이의 거리, 검지 끝과 중지 끝 	사	이의 거리 등)  > 현대의 CPU에서는 수 밀리초(ms) 이하로 거의 무시할 수 있는 수준입니다.

		2. 모델 예측 시간: 특징 벡터의 차원(크기)이 커지면 KNN 모델이 최근접 이웃을 찾는 데 걸리는 시간이 이론적으로 증가합니다. 하지만 이 역시 전체 인식 속도에 미치는 영향은 매우 미미하여 거의 체감하기 어렵습니다. 웹캠 프레임 처리나 MediaPipe의 랜드마크 추출 시간에 비하면 아주 작은 부분입니다.

		3. 과적합 위험 : 특징이 너무 많아지면 모델이 학습 데이터에만 과도하게 최적화되어, 새로운 데이터에 대해서는 성능이 떨어지는 과적합 현상이 발생할 수 있습니다. >> 다양한 학습 데이터를 확보하면 이 문제를 완화가능.
